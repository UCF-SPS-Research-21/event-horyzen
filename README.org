#+TITLE: Event hoRyzen

[[https://pypi.org/project/event-horyzen/][https://badge.fury.io/py/event-horyzen.svg]]
[[https://mybinder.org/v2/gh/UCF-SPS-Research-21/event-horyzen-example/HEAD?labpath=.%2Fevent-horyzen-example.ipynb][https://mybinder.org/badge_logo.svg]]
[[https://github.com/UCF-SPS-Research-21/event-horyzen/actions?workflow=Tests][https://github.com/UCF-SPS-Research-21/event-horyzen/workflows/Tests/badge.svg]]
[[https://event-horyzen.readthedocs.io/][https://readthedocs.org/projects/event-horyzen/badge/?version=latest&style=flat.svg]]
[[https://github.com/psf/black][https://img.shields.io/badge/code%20style-black-000000.svg]]

*Event hoRyzen* is a Python library designed to simulate and visualize geodesic motion around Schwarzschild, Reissner-Nordstrom, Kerr, and Kerr-Newman black holes.
It uses a slightly modified version of Pierre Christian and Chi-kwan Chan's FANTASY geodesic integration code (see https://github.com/pierrechristian/FANTASY + Pierre Christian and Chi-kwan Chan 2021 /ApJ/ *909* 67).

* Installation
** pip
#+begin_src bash :eval never
pip install event-horyzen
#+end_src

*or*
#+begin_src bash  :eval never
pip install event-horzyen[pyqt]
#+end_src

(If you use =zsh= as your shell you will need to quote the package name for optional dependencies, i.e., "event-horyzen[pyqt]")

Depending on whether or not you'd like to use the =pyqtgraph= and =opengl= plotting modules (They are not small dependencies. The option to plot with matplotlib is included in the base package).
** Manually
#+begin_src bash :eval never
git clone https://github.com/UCF-SPS-Research-21/event-horyzen
#+end_src

If you use Poetry for package and venv management, you can use
#+begin_src bash :eval never
poetry install
#+end_src

*or*
#+begin_src bash  :eval never
poetry install -E pyqt
#+end_src

If you don't, you can =pip install -r requirements.txt= or =conda install --file requirements.txt=.
There are multiple versions of requirements.txt provided, it should be evident what each is for.

* Usage
The code is configured with a YAML configuration file.
Please see the example at [[file:event_horyzen/config.yml]]

** Example
*I use Unix paths in the examples. Windows paths will work too --- just make sure you escape backslashes or make use of =pathlib='s functionality.*

If you'd like to use the default configuration, you can just leave the argument to =event_horyzen.run()= empty.
To copy the default config and edit it, do the following.

#+begin_src python :eval never
from pathlib import Path
from event_horyzen import event_horyzen

dest = Path("./foo/")
event_horyzen.copy_default_config(dest)
#+end_src

If you don't specify a destination, it will copy the file to your current working directory.
Now, assuming you've edited the config to your liking and its named =config.yml=:

#+begin_src python :eval never
from pathlib import Path
from event_horyzen import event_horyzen

conf_path = Path('./config.yml')
event_horyzen.run(conf_path)
#+end_src

*or for multiple geodesics simulated in parallel*

#+begin_src python :eval never
from pathlib import Path
from event_horyzen import event_horyzen

conf_path1 = Path('./config1.yml')
conf_path2 = Path('./config2.yml')
conf_path3 = Path('./config3.yml')

confs = [conf_path1, conf_path2, conf_path3]

event_horyzen.run(confs)
#+end_src



A unique directory under the output directory specified in the configuration file will be created in the format =<output-dir>/<date+time>_<name-of-config-file>=.
So, it makes sense to give your configuration files meaningful names.
The geodesic in both spherical and cartesian coordinates will be saved to this directory as =results.h5=.
The configuration file used to generate the simulation will be copied to this directory as well to ensure reproducibility.
A basic plot of the geodesic is also created and saved in the directory as both a .PNG and a =pickle= file so that the figure can be reloaded and interacted with.
[[./example-kerr-newman.png][Example Kerr-Newman Plot]]


If you want to load the pickled Matplotlib plot, you can do the following.

#+begin_src python :eval never
import pickle as pl
from pathlib import Path

plot_path = Path("<path-to-plot>/basic-plot.pickle")

with open(plot_path, "rb") as plot:
    fig = pl.load(plot)

# Now do whatever you want with the figure!

fig.show()
#+end_src

For the 3D plotting,
#+begin_src python :eval never
from pathlib import Path
from event_horyzen import animated_plot as ap

results = Path("./results.h5")
viz = ap.Visualizer(results)
viz.animation()
#+end_src

*or for multiple geodesics on the same plot*

#+begin_src python :eval never
from pathlib import Path
from event_horyzen import animated_plot as ap

results1 = Path("./results1.h5")
results2 = Path("./results2.h5")
results3 = Path("./results3.h5")

results = [results1, results2, results3]

viz = ap.Visualizer(results)
viz.animation()
#+end_src


By default, it puts a photon sphere for a M=1 (geometrized units) schwarzschild black hole on the plot for reference.
This can be turned off or modified in the call to =Visualizer()=.

*Both the simulation and the plotting can be ran directly from the command line*

First, the simulation tools.
#+begin_src bash :results output :wrap src :eval never
event-horyzen -h
#+end_src

#+begin_src bash :eval never
usage: event-horyzen [-h] [datapath ...]

positional arguments:
  datapath    The path(s) to the configuration file(s). Defaults to the
              included `config.yml` if not provided.

options:
  -h, --help  show this help message and exit
#+end_src

Now, the plotting tools.
#+begin_src bash :results output :wrap src :eval never
event-horyzen-plot -h
#+end_src

#+begin_src bash :eval never
usage: event-horyzen-plot [-h] datapath [datapath ...]

positional arguments:
  datapath    The path(s) to the data file(s).

options:
  -h, --help  show this help message and exit
#+end_src

* Contributing
** Setting Up Dev Environment
Dependencies are managed with [[https://python-poetry.org/docs/master/#installing-with-the-official-installer][Poetry]]. Tests, documentation, and linting automation are handled by [[https://nox.thea.codes/en/stable/][Nox]].

#+begin_src bash :eval never
pip install nox
poetry install --dev
#+end_src

Code style is handled by [[https://github.com/psf/black][Black]]. Pre-commit hooks are available at [[file:.pre-commit-config.yaml]]. You can install them with src_bash{pre-commit install}. By default it runs =flake8= and =black= before commit.

To run tests, lint, and format code simultaneously, run
#+begin_src bash :eval never
nox -r
#+end_src


On first run, =nox= will be very slow while it creates its virtual environments. On subsequent runs, the =-r= option will make it reuse the environments.

To run specific =nox= sessions, specify them like
#+begin_src bash :eval never
nox -rs <session>
#+end_src
The available sessions are =tests=, =lint=, =mypy=, =black=, =xdoctest=, and =docs=.

=Sphinx= builds the documentation, and on commit readthedocs will build current documentation. If you want to build the documentation locally, run
#+begin_src bash :eval never
nox -rs docs
#+end_src

For tests (or any of the sessions) that you want to run on specific files, run them like
#+begin_src bash :eval never
nox -rs tests -- tests/test_event_horyzen.py
nox -rs lint -- event_horyzen/fantasy.py
#+end_src

** Making Pull Requests
1. Fork the repository.
2. Make a feature branch in the fork with your changes.
3. Make the Pull Request with a reasonably detailed description of your changes.
